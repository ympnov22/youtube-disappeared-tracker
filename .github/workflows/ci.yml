name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: youtube_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Debug CI Environment
      run: |
        echo "=== Environment Details ==="
        python -V
        poetry --version
        poetry run mypy --version
        echo "=== Working Directory ==="
        pwd && ls -la
        echo "=== Git Status ==="
        git rev-parse HEAD
        git status --porcelain
        echo "=== Package Structure ==="
        find app -name "*.py" | head -10
        ls -la app/
    
    - name: Clear Caches
      run: |
        echo "=== Clearing problematic caches ==="
        rm -rf .mypy_cache .pytest_cache
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
    
    - name: Run linting
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .
        echo "=== Running MyPy with verbose output ==="
        poetry run mypy app --no-incremental --follow-imports=silent --pretty --show-traceback --verbose
    
    - name: Debug Failing Files
      if: failure()
      run: |
        echo "=== Dumping potentially failing files ==="
        echo "--- app/api/channels.py (first 50 lines) ---"
        sed -n '1,50p' app/api/channels.py || echo "File not found"
        echo "--- app/core/database.py ---"
        cat app/core/database.py || echo "File not found"
        echo "--- app/services/youtube_client.py (first 30 lines) ---"
        sed -n '1,30p' app/services/youtube_client.py || echo "File not found"
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/youtube_tracker_test
        REDIS_URL: redis://localhost:6379/0
        APP_SECRET_KEY: test-secret-key
        SESSION_SECRET: test-session-secret
        SCAN_ENABLED: false
      run: |
        poetry run pytest --cov=app --cov-report=xml --cov-fail-under=85
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run security checks
      run: |
        poetry run pip install pip-audit bandit
        poetry run pip-audit --desc --format=json --output=pip-audit-report.json || true
        poetry run bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: |
          bandit-report.json
          pip-audit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: youtube-tracker:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
